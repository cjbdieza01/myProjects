React components are the building blocks of a user interface in the React JavaScript library. They are reusable and self-contained pieces of code that encapsulate the behavior and presentation of a part of the UI. 

A React component represents a specific part of the user interface, such as a button, input field, or even a more complex element like a form or a navigation bar. Each component can have its own state, properties (props), and methods.

Components in React can be divided into two main types:

1. Functional Components: These are simple, stateless components defined as JavaScript functions. They take in props as arguments and return JSX (JavaScript XML) to describe the structure and content of the component. Functional components are easier to write and test, and they are preferred when you only need to render UI based on the given props.

Here's an example of a functional component in React:

```jsx
import React from 'react';

function Button(props) {
  return (
    <button onClick={props.onClick}>
      {props.label}
    </button>
  );
}
```

2. Class Components: These are more powerful components defined as ES6 classes. They extend the base `React.Component` class and can have their own state, lifecycle methods, and event handlers. Class components are useful when you need to manage complex state or handle component lifecycle events.

Here's an example of a class component in React:

```jsx
import React from 'react';

class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0
    };
  }

  increment() {
    this.setState(prevState => ({
      count: prevState.count + 1
    }));
  }

  render() {
    return (
      <div>
        <p>Count: {this.state.count}</p>
        <button onClick={() => this.increment()}>Increment</button>
      </div>
    );
  }
}
```

Both functional and class components can be rendered and composed together to create a complex UI hierarchy in React applications. They promote reusability, modularity, and maintainability, making it easier to build and manage large-scale applications.