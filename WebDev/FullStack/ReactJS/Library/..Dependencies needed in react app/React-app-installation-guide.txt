// First install with -g

Certainly! Here's a step-by-step guide to setting up a new React.js project with the necessary commands in the correct order:

1. **Create a new directory for your project**:

   ```
   mkdir my-react-app
   ```

   Replace "my-react-app" with the desired name of your project.

2. **Navigate to the project directory**:

   ```
   cd my-react-app
   ```

   Change "my-react-app" to the actual name of your project directory.

3. **Initialize a new npm project**:

   ```
   npm init -y
   ```

   This command initializes a new npm project with default settings and generates a `package.json` file.

4. **Install React and React DOM**:

   ```
   npm install react react-dom
   ```

   This command installs React and React DOM, the core dependencies for a React.js application.

5. **Install additional dependencies (optional)**:

   ```
   npm install redux react-redux react-router-dom material-ui
   ```

   Replace the example dependencies with any additional packages you need for your project.

6. **Create your React components**:

   Create your React components in separate files or organize them into folders within your project directory. You can use any preferred text editor or integrated development environment (IDE) to create and edit the files.

7. **Build and run your project**:

   You have a couple of options here:

   - If you're using a bundler like Webpack or Parcel, configure the bundler according to your project's requirements, and then build and run the project based on the bundler's instructions.

   - If you prefer a simpler setup, you can use Create React App (CRA) to streamline the development process. Install CRA globally (if not installed) with:

     ```
     npm install -g create-react-app
     ```

     Then, create a new React app using CRA:

     ```
     npx create-react-app .
     ```

     The dot (`.`) at the end indicates that the project should be created in the current directory.

     After the command completes successfully, start the development server:

     ```
     npm start
     ```

     This command will compile your React app and open it in a development server, enabling live reloading as you make changes.

Following these steps will guide you through the process of setting up a new React.js project, installing the necessary dependencies, creating your React components, and running your application.



// If installed -g

If you have previously installed Create React App (CRA) globally on your system, you don't need to reinstall it each time you create a new React project. Once installed globally, you can use the `npx create-react-app` command to generate a new React project without needing to install CRA again.

The `npx` command allows you to execute a package without having to install it globally. When you run `npx create-react-app`, it checks if the `create-react-app` package is available locally within your project's `node_modules` directory. If it's not found locally, it automatically downloads the latest version and runs it, creating a new React project in the current directory.

Here's the typical workflow to create a new React project using CRA:

1. **Create a new directory for your project**:

   ```
   mkdir my-react-app
   ```

   Replace "my-react-app" with the desired name of your project.

2. **Navigate to the project directory**:

   ```
   cd my-react-app
   ```

   Change "my-react-app" to the actual name of your project directory.

3. **Create a new React project**:

   ```
   npx create-react-app .
   ```

   The dot (`.`) at the end indicates that the project should be created in the current directory. This command will automatically download the latest version of Create React App (if not already available locally) and set up a new React project in the current directory.

4. **Start the development server**:

   ```
   npm start
   ```

   This command will compile your React app and open it in a development server, enabling live reloading as you make changes.

By following these steps, you can create a new React project without having to reinstall Create React App globally. The `npx` command takes care of downloading and running the necessary package for you, ensuring that you're using the latest version of Create React App each time you create a new project.



// // //
To install the dependencies listed in your question, you can use the following command in your project directory:

```
npm install @testing-library/jest-dom@^5.16.5 @testing-library/react@^13.4.0 @testing-library/user-event@^13.5.0 bootstrap@^5.3.0 react@^18.2.0 react-bootstrap@^2.8.0 react-dom@^18.2.0 react-router-dom@^6.14.0 react-scripts@5.0.1 react-toastify@^9.1.3 web-vitals@^2.1.4
```

This command installs all the listed dependencies along with their specified versions. It resolves the dependencies and downloads them into the "node_modules" folder within your project directory.

Make sure you run this command in the root directory of your project, where your `package.json` file is located. The dependencies will be added to the `dependencies` section of your `package.json` file and saved in the `node_modules` folder.

Note: If you are using a different package manager like Yarn, you can replace `npm install` with `yarn add` in the command above.

After running this command, the specified dependencies should be installed in your project, and you can use them in your React application.